Index: src/main/java/it/polimi/ingsw/model/Board.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package it.polimi.ingsw.model;\r\n\r\nimport java.util.List;\r\nimport java.util.Optional;\r\n\r\n\r\npublic class Board {\r\n\r\n    private static final int rowLength = 9;\r\n\r\n    private static final int columnLength = 9;\r\n\r\n    private Tile[][] spaces;\r\n\r\n    private final Bag bag = new Bag();\r\n\r\n    private final Optional<EndGameToken> endGameToken;\r\n\r\n    public Board(int num) {\r\n        spaces = new Tile[rowLength][columnLength];\r\n        endGameToken = Optional.of(new EndGameToken());\r\n\r\n        if(num>=2 && num<5){\r\n\r\n            for (int j = 3; j < 5; j++) {\r\n                    spaces[1][j] = Tile.EMPTY;\r\n                }\r\n            for (int j = 3; j < 6; j++) {\r\n                    spaces[2][j] = Tile.EMPTY;\r\n                }\r\n            for (int j = 2; j < 8; j++) {\r\n                    spaces[3][j] = Tile.EMPTY;\r\n                }\r\n            for (int j = 1; j < 5; j++) {\r\n                    spaces[4][j] = Tile.EMPTY;\r\n                }\r\n            for (int j = 1; j < 7; j++) {\r\n                    spaces[5][j] = Tile.EMPTY;\r\n                }\r\n            for (int j = 3; j < 6; j++) {\r\n                    spaces[6][j] = Tile.EMPTY;\r\n                }\r\n            for (int j = 4; j < 6; j++) {\r\n                    spaces[7][j] = Tile.EMPTY;\r\n                }\r\n\r\n            if(num>=3){\r\n                spaces[0][3]=Tile.EMPTY;\r\n                spaces[2][6]=Tile.EMPTY;\r\n                spaces[3][8]=Tile.EMPTY;\r\n                spaces[6][6]=Tile.EMPTY;\r\n                spaces[8][5]=Tile.EMPTY;\r\n                spaces[6][2]=Tile.EMPTY;\r\n                spaces[5][0]=Tile.EMPTY;\r\n                spaces[2][2]=Tile.EMPTY;\r\n\r\n\r\n            }\r\n\r\n            if(num==4){\r\n                spaces[0][4]=Tile.EMPTY;\r\n                spaces[1][5]=Tile.EMPTY;\r\n                spaces[4][8]=Tile.EMPTY;\r\n                spaces[5][7]=Tile.EMPTY;\r\n                spaces[8][4]=Tile.EMPTY;\r\n                spaces[7][3]=Tile.EMPTY;\r\n                spaces[4][0]=Tile.EMPTY;\r\n                spaces[3][1]=Tile.EMPTY;\r\n\r\n            }\r\n        }\r\n\r\n    }\r\n\r\n    public Tile[][] getSpaces() {\r\n        return spaces;\r\n    }\r\n\r\n    public void setSpaces(Tile[][] spaces) {\r\n        this.spaces = spaces;\r\n    }\r\n\r\n    public boolean checkToRefill() {\r\n        //check if it is to be refilled\r\n        //uses method checkNoMoreTurns()\r\n        return false;\r\n    }\r\n\r\n    private boolean checkNoMoreTurns() {\r\n        //check if it is the last turn of the last cycle\r\n        return false;\r\n    }\r\n\r\n    public void refill() {\r\n        bag.refillBoard(this);\r\n    }\r\n\r\n    public boolean selectTiles(List<Coordinates> selection) {\r\n        //check whether selection is legit and if true empties the tiles selected on the board\r\n        //uses method checkSelection()\r\n        //uses method emptyTiles()\r\n        return false;\r\n    }\r\n\r\n    private boolean checkSelection(List<Coordinates> selection) {\r\n        //check whether selection is legit\r\n        return false;\r\n    }\r\n\r\n    private void emptyTiles(List<Coordinates> selection) {\r\n        //empties the tile selected on board\r\n    }\r\n\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/it/polimi/ingsw/model/Board.java b/src/main/java/it/polimi/ingsw/model/Board.java
--- a/src/main/java/it/polimi/ingsw/model/Board.java	
+++ b/src/main/java/it/polimi/ingsw/model/Board.java	
@@ -1,5 +1,7 @@
 package it.polimi.ingsw.model;
 
+import java.util.ArrayList;
+import java.util.HashSet;
 import java.util.List;
 import java.util.Optional;
 
@@ -80,12 +82,24 @@
         this.spaces = spaces;
     }
 
+    /**
+     *checks if the board is refillable
+     * @author: Edoardo
+     * @return: true or false
+     */
+
+    //NB: devo ancora aggiungere il check se sono all'ultimo turno!
     public boolean checkToRefill() {
-        //check if it is to be refilled
-        //uses method checkNoMoreTurns()
-        return false;
-    }
+
+        for(int i = 0; i < rowLength; i++)
+            for(int j = 0; j < columnLength; j++) {
+                if(isCompletelyFree(i,j)==false)
+                    return false;
+            }
 
+        return true;
+    }
+
     private boolean checkNoMoreTurns() {
         //check if it is the last turn of the last cycle
         return false;
@@ -111,4 +125,62 @@
         //empties the tile selected on board
     }
 
+    /**
+     *checks if a tile has no other adjacent tiles
+     * @author: Edoardo
+     * @param: Coordinates of a space in the board
+     * @return: true or false
+     */
+    private boolean isCompletelyFree(int x, int y){
+        if(adjacentTile(x,y).contains(Tile.CATS))
+            return false;
+        if(adjacentTile(x,y).contains(Tile.BOOKS))
+            return false;
+        if(adjacentTile(x,y).contains(Tile.FRAMES))
+            return false;
+        if(adjacentTile(x,y).contains(Tile.GAMES))
+            return false;
+        if(adjacentTile(x,y).contains(Tile.PLANTS))
+            return false;
+        if(adjacentTile(x,y).contains(Tile.TROPHIES))
+            return false;
+
+        return true;
+
+    }
+
+    /**
+     *Adjacent tile
+     * @author: Edoardo
+     * @param: Coordinates of a space in the board
+     * @return: a list of adjacent Tile
+     */
+    private List<Tile> adjacentTile(int x, int y){
+
+        List<Tile> adjTile = new ArrayList<Tile>();
+
+        if(x>8)
+            adjTile.add(null);
+        else
+            adjTile.add(spaces[x+1][y]);
+
+        if(x<8)
+            adjTile.add(null);
+        else
+            adjTile.add(spaces[x-1][y]);
+
+        if(y>8)
+            adjTile.add(null);
+        else
+            adjTile.add(spaces[x][y+1]);
+
+        if(y<8)
+            adjTile.add(null);
+        else
+            adjTile.add(spaces[x][y-1]);
+
+        return adjTile;
+    }
+
+
 }
Index: src/main/java/it/polimi/ingsw/model/Coordinates.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package it.polimi.ingsw.model;\r\n\r\npublic record Coordinates(int x, int y) {}\r\n\r\n//A record type class make the parameters as private final, and creates by itself methods to get them: x() and y()
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/it/polimi/ingsw/model/Coordinates.java b/src/main/java/it/polimi/ingsw/model/Coordinates.java
--- a/src/main/java/it/polimi/ingsw/model/Coordinates.java	
+++ b/src/main/java/it/polimi/ingsw/model/Coordinates.java	
@@ -1,5 +1,7 @@
 package it.polimi.ingsw.model;
 
-public record Coordinates(int x, int y) {}
+public record Coordinates(int x, int y) {
+
+}
 
 //A record type class make the parameters as private final, and creates by itself methods to get them: x() and y()
\ No newline at end of file
Index: pom.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+><project xmlns=\"http://maven.apache.org/POM/4.0.0\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\r\n  xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd\">\r\n  <modelVersion>4.0.0</modelVersion>\r\n\r\n  <groupId>it.polimi.ingsw</groupId>\r\n  <artifactId>PSP50</artifactId>\r\n  <version>1.0-SNAPSHOT</version>\r\n    <build>\r\n        <plugins>\r\n            <plugin>\r\n                <groupId>org.apache.maven.plugins</groupId>\r\n                <artifactId>maven-compiler-plugin</artifactId>\r\n                <configuration>\r\n                    <source>16</source>\r\n                    <target>16</target>\r\n                </configuration>\r\n            </plugin>\r\n        </plugins>\r\n    </build>\r\n    <packaging>jar</packaging>\r\n\r\n  <name>PSP50</name>\r\n  <url>http://maven.apache.org</url>\r\n\r\n  <properties>\r\n    <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>\r\n  </properties>\r\n\r\n  <dependencies>\r\n    <dependency>\r\n      <groupId>junit</groupId>\r\n      <artifactId>junit</artifactId>\r\n      <version>3.8.1</version>\r\n      <scope>test</scope>\r\n    </dependency>\r\n  </dependencies>\r\n</project>\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/pom.xml b/pom.xml
--- a/pom.xml	
+++ b/pom.xml	
@@ -24,6 +24,8 @@
 
   <properties>
     <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>
+    <maven.compiler.source>19</maven.compiler.source>
+    <maven.compiler.target>19</maven.compiler.target>
   </properties>
 
   <dependencies>
